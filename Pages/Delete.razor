@page "/delete"
@*
    /*
    Peter Clayton, 12-04-2020
    COURSE: CS652-Hadoop/NoSQL
    University of Bridgeport
    Master's Candidate May 2021
    Department of Engineering

    Delete.razor:
    Purpose: Blazor Page. Deletes a document in the StudentPerformanceDocuments collection
    */
*@

@using StudentPerformanceApp.Data;
@using StudentPerformanceApp.Pages.FormModels;
@using StudentPerformanceApp.Pages.Components;
@using StudentPerformanceAPI.Models;
@using System.ComponentModel.DataAnnotations;



<h3>Deleting a user record by Id</h3>
<br />
<br />
<EditForm Model="idsModel" OnValidSubmit="DeleteUserByIDAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Field Name</label>
        <InputText class="form-control col-3" @bind-Value="idsModel.Field" placeholder="Enter Field Name (2nd Row)" />
    </div>
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Value</label>
        <InputText class="form-control col-3" @bind-Value="idsModel.Value" placeholder="Enter Value" />
    </div>
    <br />
    <div class="col-12 row">
        <span class="col-2"></span>
        <input type="submit" class="form-control col-1 btn btn-primary" value="Delete" />
        <br />
    </div>
</EditForm>


@if (DeletionResults != null)
{
    <br />
    <h3>Search Results</h3>

    <h3>@idsModel.Value was deleted!</h3>
    <br />
}

<h3>All Records</h3>
@if (Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ContainerTable Users="@Users"></ContainerTable>
}


@code {

    [Inject]
    public IStudentPerformanceService ISPerfService { get; set; }

    public IEnumerable<User> Users { get; set; }
    public string DeletionResults { get; set; }

    public IDSearchFormModel idsModel { get; set; }

    public string DeletedUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        idsModel = new IDSearchFormModel();
        Users = (await ISPerfService.ListAllUsersAsync()).ToList();
    }

    //protected async Task DeleteUserByIDAsync()
    protected async Task DeleteUserByIDAsync()
    {
        string container = "studentPerformanceDocuments";
        string fieldName = idsModel.Field;
        string filter = fieldName + "/" + idsModel.Value;
        var results = await (ISPerfService.DeleteUsersAsync(container, filter));
        DeletionResults = results;
        DeletedUser = idsModel.Value;
        idsModel = new IDSearchFormModel();
        Users = (await ISPerfService.ListAllUsersAsync()).ToList();
    }
}
